# Generated by Django 4.2.5 on 2025-10-07 10:13

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('api', '0010_gallerycollection_galleryitem_gallerydownloadrecord_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='社群名称')),
                ('description', models.TextField(blank=True, null=True, verbose_name='社群描述')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
            ],
            options={
                'verbose_name': '社群板块',
                'verbose_name_plural': '社群板块',
            },
        ),
        migrations.CreateModel(
            name='CommunityPost',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='帖子标题')),
                ('content', models.TextField(verbose_name='帖子内容')),
                ('status', models.CharField(choices=[('pending_review', '待审核'), ('published', '已发布'), ('closed', '已关闭'), ('rejected', '已驳回')], default='published', max_length=20, verbose_name='帖子状态')),
                ('rewardPoints', models.PositiveIntegerField(default=0, verbose_name='悬赏积分')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
            ],
            options={
                'verbose_name': '社群帖子',
                'verbose_name_plural': '社群帖子',
            },
        ),
        migrations.CreateModel(
            name='CommunityReply',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='回复内容')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='回复时间')),
            ],
            options={
                'verbose_name': '社群回帖',
                'verbose_name_plural': '社群回帖',
            },
        ),
        migrations.AlterModelOptions(
            name='tag',
            options={'ordering': ['scope', 'name'], 'verbose_name': '标签', 'verbose_name_plural': '标签'},
        ),
        migrations.AddField(
            model_name='tag',
            name='scope',
            field=models.CharField(choices=[('course', '课程'), ('gallery', '画廊'), ('community', '社群'), ('certification', '认证'), ('personalcenter', '个人中心')], default='course', max_length=20, verbose_name='标签范围'),
        ),
        migrations.AlterField(
            model_name='course',
            name='tags',
            field=models.ManyToManyField(blank=True, limit_choices_to={'scope': 'course'}, related_name='courses', to='api.tag', verbose_name='课程标签'),
        ),
        migrations.AlterField(
            model_name='galleryitem',
            name='tags',
            field=models.ManyToManyField(blank=True, limit_choices_to={'scope': 'gallery'}, related_name='gallery_items', to='api.tag', verbose_name='画廊标签'),
        ),
        migrations.AlterField(
            model_name='tag',
            name='name',
            field=models.CharField(max_length=100, verbose_name='标签名称'),
        ),
        migrations.AddConstraint(
            model_name='tag',
            constraint=models.UniqueConstraint(fields=('name', 'scope'), name='unique_name_scope_combination'),
        ),
        migrations.AddField(
            model_name='communityreply',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_replies', to=settings.AUTH_USER_MODEL, verbose_name='回帖人'),
        ),
        migrations.AddField(
            model_name='communityreply',
            name='post',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='api.communitypost', verbose_name='所属帖子'),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='author',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='community_posts', to=settings.AUTH_USER_MODEL, verbose_name='发帖人'),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='best_answer',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='best_for_post', to='api.communityreply', verbose_name='最佳答案'),
        ),
        migrations.AddField(
            model_name='communitypost',
            name='community',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='posts', to='api.community', verbose_name='所属社群'),
        ),
        migrations.AddField(
            model_name='community',
            name='assistant',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assisted_communities', to=settings.AUTH_USER_MODEL, verbose_name='创始人助手'),
        ),
        migrations.AddField(
            model_name='community',
            name='founder',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='founded_communities', to=settings.AUTH_USER_MODEL, verbose_name='创始人'),
        ),
        migrations.AddField(
            model_name='community',
            name='member',
            field=models.ManyToManyField(blank=True, related_name='joined_communities', to=settings.AUTH_USER_MODEL, verbose_name='社群成员'),
        ),
        migrations.AddField(
            model_name='community',
            name='tags',
            field=models.ManyToManyField(blank=True, limit_choices_to={'scope': 'community'}, related_name='communities', to='api.tag', verbose_name='社群标签'),
        ),
    ]
