"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.24.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os 
from environ import Env  # 导入 Env 类
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- 新增以下代码块，用于读取 .env 文件 ---
env = Env()
#Env.read_env(BASE_DIR.parent / '.env')

Env.read_env(os.path.join(BASE_DIR, '.env'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-^d3rv0ej)g*pxf017)((j_m@ar-@ccqboxb))zde1j1nx-urc5"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "jazzmin",
    'reversion',
    'tinymce',
    "corsheaders",
    'django_elasticsearch_dsl',
    'search',
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'rest_framework',
    'api',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, 'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
        'default':env.db(), 
        #"ENGINE": "django.db.backends.sqlite3",
        #"NAME": BASE_DIR / "db.sqlite3",
    
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = []

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# 1. 指定我们自定义的用户模型
AUTH_USER_MODEL = 'api.User'

# 2. DRF (Django REST Framework) 的配置
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    )
}

# 3. Celery 的配置
CELERY_BROKER_URL = env('REDIS_URL')
CELERY_RESULT_BACKEND = env('REDIS_URL')
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

# 4. 缓存 (Cache) 的配置
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": env('REDIS_URL'),
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}
# CORS 配置
CORS_ALLOWED_ORIGINS = [
    "http://localhost:5173", # 允许我们的 Vue 前端开发服务器访问
    "http://127.0.0.1:5173",
]

# 媒体文件（用户上传的文件）配置
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# 邮件配置 (开发环境使用控制台后端)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# 自定义认证后端
AUTHENTICATION_BACKENDS = [
    'api.backends.MultiFieldAuthBackend', # 我们自定义的后端
    'django.contrib.auth.backends.ModelBackend', # Django 默认的后端，保留以便 admin 登录
]

#令牌控制
SIMPLE_JWT = {
    # 访问令牌 (Access Token) 的有效期
    'ACCESS_TOKEN_LIFETIME': timedelta(days=1), # 您可以在这里调整分钟数

    # 刷新令牌 (Refresh Token) 的有效期
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7), # 您可以在这里调整天数

    # --- 以下是库的默认配置，保持原样即可 ---
    'ROTATE_REFRESH_TOKENS': False,
    'BLACKLIST_AFTER_ROTATION': False,
    'UPDATE_LAST_LOGIN': False,

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser',

    'JTI_CLAIM': 'jti',

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp',
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5),
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1),
}

BLEACH_ALLOWED_TAGS = [
    'p', 'b', 'i', 'u', 'strong', 'em', 'strike', 'del',
    'h1', 'h2', 'h3', 'h4', 'h5', 'h6',
    'ul', 'ol', 'li',
    'a', 'img',
    'br',
]

BLEACH_ALLOWED_ATTRIBUTES = {
    '*': ['class', 'style'], # 允许所有标签带 class 和 style 属性
    'a': ['href', 'title', 'target'],
    'img': ['src', 'alt', 'width', 'height'],
}

BLEACH_ALLOWED_STYLES = [
    'color', 'font-weight', 'text-align', 'width', 'height',
]

# 将以上配置合并到一个字典中，供 BleachField 使用
BLEACH_CONFIG = {
    'tags': BLEACH_ALLOWED_TAGS,
    'attributes': BLEACH_ALLOWED_ATTRIBUTES,
    'styles': BLEACH_ALLOWED_STYLES,
}

# ===============================================
# =======      TinyMCE 富文本编辑器配置      =======
# ===============================================
TINYMCE_DEFAULT_CONFIG = {
    "theme": "silver",
    "height": 500,
    "menubar": True,
    "plugins": "advlist,autolink,lists,link,image,charmap,print,preview,anchor,"
    "searchreplace,visualblocks,code,fullscreen,insertdatetime,media,table,paste,"
    "code,help,wordcount,textcolor,colorpicker", 
    "toolbar": "undo redo | formatselect | "
    "bold italic backcolor forecolor | alignleft aligncenter " 
    "alignright alignjustify | bullist numlist outdent indent | "
    "removeformat | help",
    "content_css": "default",
}

# ===============================================
# =======       Jazzmin Admin 主题配置       =======
# ===============================================
JAZZMIN_SETTINGS = {
    # 网站标题，显示在登录页和浏览器标签页
    "site_title": "本末实验室管理后台",

    # 网站头部，显示在左上角
    "site_header": "本末实验室",

    # 欢迎语，显示在首页
    "welcome_sign": "欢迎来到本末实验室管理后台",

    # 版权信息
    "copyright": "Benmo Lab Ltd.",
    
    # 路由信息，显示在顶部菜单
    "topmenu_links": [
        {"name": "返回主站", "url": "admin/", "new_window": True},
        {"name": "仪表盘",  "url": "admin:dashboard", "permissions": ["auth.view_user"]},
    ],

    # --- 界面调整 ---
    # 侧边栏默认是否展开
    "show_sidebar": True,
    # 是否开启UI定制器
    "ui_tweaks": {
        "navbar_small_text": False,
        "footer_small_text": False,
        "body_small_text": False,
        "brand_small_text": False,
        "brand_colour": False,
        "accent": "accent-primary",
        "navbar": "navbar-white navbar-light",
        "no_navbar_border": False,
        "navbar_fixed": False,
        "layout_boxed": False,
        "footer_fixed": False,
        "sidebar_fixed": True,
        "sidebar": "sidebar-dark-primary",
        "sidebar_nav_small_text": False,
        "sidebar_disable_expand": False,
        "sidebar_nav_child_indent": False,
        "sidebar_nav_compact_style": False,
        "sidebar_nav_legacy_style": False,
        "sidebar_nav_flat_style": False,
        "theme": "default",
        "dark_mode_theme": None,
        "button_classes": {
            "primary": "btn-primary",
            "secondary": "btn-secondary",
            "info": "btn-info",
            "warning": "btn-warning",
            "danger": "btn-danger",
            "success": "btn-success"
        }
    }
}

# -----------------------------------------------------------------
# ELASTICSEARCH (搜索) 配置
# -----------------------------------------------------------------
# 'env' 函数来自 django-environ，你应该在文件顶部已经定义了
ELASTICSEARCH_DSL = {
    'default': {
        'hosts': env('ELASTICSEARCH_URL', default='http://localhost:9200'),
    },
}

ELASTICSEARCH_DSL_SIGNAL_PROCESSOR = 'search.custom_signal_processor.CelerySignalProcessor'
ELASTICSEARCH_DSL_AUTO_REFRESH = False